name: shesha-#{role}#-#{env}#
runtime: yaml
description: Shesha #{role}# #{env}# for #{projectName}#

config:
  sqlAdmin:
    type: string
    default: pulumi

variables:
  sqlResourceGroupName: containerapps-shared
  sqlServerName: containerapps-sql-shared
  sqlElasticPoolName: auto-pool
  sqlDatabaseName: #{projectName}#-shesha-#{env}#
  resourceGroupName: containerapps-shesha-#{role}#-#{env}#-rg
  registryLoginServer: #{repoServer}#
  adminUsername: #{repoUsername}#
  adminPasswords: #{repoPassword}#   
  containerAppName: #{abbrvProjectName}#-#{role}#-#{env}#
  containerAppCustomerDomainName: #{projectName}#-#{role}#-#{env}#.shesha.dev
  containerAppEnvName: shesha-#{role}#-#{env}#
  certificateId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shesha-#{role}#-#{env}#-rg/providers/Microsoft.App/managedEnvironments/shesha-#{role}#-#{env}#-env/certificates/shesha.dev
  containerAppRevisionImage: boxfusionregistry.azurecr.io/shesha-api-rev1-images:latest
  
resources:
  sqlDatabase:
    type: azure:sql:Database
    properties:
      resourceGroupName: ${sqlResourceGroupName}
      serverName: ${sqlServerName}      
      createMode: Copy
      elasticPoolName: ${sqlElasticPoolName}
      sourceDatabaseId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shared/providers/Microsoft.Sql/servers/containerapps-sql-shared/databases/#{databaseName}#
      name: ${sqlDatabaseName}
      location: southafricanorth
      tags:
        shesha: #{projectName}#-shesha-#{role}#-#{env}#

  # sqlDatabase:
  #   type: azure:mssql:Database
  #   properties:
  #     name: ${sqlDatabaseName}    
  #     serverId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shared/providers/Microsoft.Sql/servers/containerapps-sql-shared
  #     collation: SQL_Latin1_General_CP1_CI_AS          
  #     createMode: Copy
  #     creationSourceDatabaseId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shared/providers/Microsoft.Sql/servers/containerapps-sql-shared/databases/#{databaseName}#
  #     elasticPoolId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shared/providers/Microsoft.Sql/servers/containerapps-sql-shared/elasticPools/auto-pool          
  #     licenseType: BasePrice
  #     zoneRedundant: false
  #     skuName: GP_Gen5_2
  #     tags:
  #       shesha: #{projectName}#-shesha-#{role}#-#{env}#

  containerApp:
    type: azure-native:app:ContainerApp
    properties:
      configuration:
        # dapr:
        #   appPort: 3000
        #   appProtocol: http
        #   enabled: true
        ingress:
          customDomains:
            - bindingType: SniEnabled
              certificateId: ${certificateId}
              name: ${containerAppCustomerDomainName}
          external: true
          targetPort: 8080
          transport: auto          
          traffic:
            - label: "firstrevision-01"
              # revisionName: ${containerAppName}"-FirstBuild"
              weight: 100
              latestRevision: true
        registries:
          - server: ${registryLoginServer}
            username: ${adminUsername}
            passwordSecretRef: "pwd"           
        secrets:
          - name: "pwd"
            value: ${adminPasswords}          
      containerAppName: ${containerAppName}
      location: southafricanorth
      tags:
        shesha: #{projectName}#-shesha-#{role}#-#{env}#
      managedEnvironmentId: /subscriptions/0e111515-3d91-4650-bd92-dfca52077d62/resourceGroups/containerapps-shesha-api-#{env}#-rg/providers/Microsoft.App/managedEnvironments/shesha-api-#{env}#-env
      resourceGroupName: ${resourceGroupName}
      template: 
        containers:
          - image: ${containerAppRevisionImage}
            name: #{abbrvProjectName}#-#{role}#-#{env}#
            resources:
              cpu: 2.0
              memory: "4Gi"
            # probes:
            #   - httpGet:
            #       port: 80
            #     initialDelaySeconds: 60
            #     periodSeconds: 60
            #     type: Liveness
        scale:
          maxReplicas: 5
          minReplicas: 0
          rules:
            - custom:
                metadata:
                  concurrentRequests: "250"
                type: http
              name: httpscalingrule  
outputs:
  # endpoint: https://${containerapp.configuration.ingress.fqdn}
  resourceGroupName: ${resourceGroupName}
  containerAppCustomerDomainName: ${containerAppCustomerDomainName}
  containerAppEnvName: ${containerAppEnvName}
  certificateId: ${certificateId}
  containerAppRevisionImage: ${containerAppRevisionImage}
  sqlResourceGroupName: ${sqlResourceGroupName}
  sqlServerName: ${sqlServerName}
  sqlElasticPoolName: ${sqlElasticPoolName}
  sqlDatabaseName: ${sqlDatabaseName}
